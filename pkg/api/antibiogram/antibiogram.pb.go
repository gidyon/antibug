// Code generated by protoc-gen-go. DO NOT EDIT.
// source: antibiogram.proto

package antibug_antibiogram

import (
	context "context"
	fmt "fmt"
	"github.com/gidyon/antibug/pkg/api/culture"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Represents the duration of time for filtering antibiograms
type Duration int32

const (
	Duration_PAST_SIX_MONTHS       Duration = 0
	Duration_PAST_ONE_YEARS        Duration = 1
	Duration_PAST_TWO_YEARS        Duration = 2
	Duration_PAST_FOUR_YEARS       Duration = 3
	Duration_PAST_EIGHT_YEARS      Duration = 4
	Duration_PAST_SIXTEEN_YEARS    Duration = 5
	Duration_PAST_THIRTY_TWO_YEARS Duration = 6
)

var Duration_name = map[int32]string{
	0: "PAST_SIX_MONTHS",
	1: "PAST_ONE_YEARS",
	2: "PAST_TWO_YEARS",
	3: "PAST_FOUR_YEARS",
	4: "PAST_EIGHT_YEARS",
	5: "PAST_SIXTEEN_YEARS",
	6: "PAST_THIRTY_TWO_YEARS",
}

var Duration_value = map[string]int32{
	"PAST_SIX_MONTHS":       0,
	"PAST_ONE_YEARS":        1,
	"PAST_TWO_YEARS":        2,
	"PAST_FOUR_YEARS":       3,
	"PAST_EIGHT_YEARS":      4,
	"PAST_SIXTEEN_YEARS":    5,
	"PAST_THIRTY_TWO_YEARS": 6,
}

func (x Duration) String() string {
	return proto.EnumName(Duration_name, int32(x))
}

func (Duration) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{0}
}

// Represents the scope of the antibiogram
type RegionScope int32

const (
	RegionScope_COUNTRY    RegionScope = 0
	RegionScope_COUNTY     RegionScope = 1
	RegionScope_SUB_COUNTY RegionScope = 2
	RegionScope_FACILITY   RegionScope = 3
)

var RegionScope_name = map[int32]string{
	0: "COUNTRY",
	1: "COUNTY",
	2: "SUB_COUNTY",
	3: "FACILITY",
}

var RegionScope_value = map[string]int32{
	"COUNTRY":    0,
	"COUNTY":     1,
	"SUB_COUNTY": 2,
	"FACILITY":   3,
}

func (x RegionScope) String() string {
	return proto.EnumName(RegionScope_name, int32(x))
}

func (RegionScope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{1}
}

// Represents gender group
type Gender int32

const (
	Gender_ALL    Gender = 0
	Gender_MALE   Gender = 1
	Gender_FEMALE Gender = 3
)

var Gender_name = map[int32]string{
	0: "ALL",
	1: "MALE",
	3: "FEMALE",
}

var Gender_value = map[string]int32{
	"ALL":    0,
	"MALE":   1,
	"FEMALE": 3,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}

func (Gender) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{2}
}

// PathogenSusceptibility refers to susceptibility of a pathogen against an antimicrobial agent
type PathogenSusceptibility struct {
	AntimicrobialName    string        `protobuf:"bytes,1,opt,name=antimicrobial_name,json=antimicrobialName,proto3" json:"antimicrobial_name,omitempty"`
	AntimicrobialId      string        `protobuf:"bytes,2,opt,name=antimicrobial_id,json=antimicrobialId,proto3" json:"antimicrobial_id,omitempty"`
	Isolates             int32         `protobuf:"varint,3,opt,name=isolates,proto3" json:"isolates,omitempty"`
	SusceptibilityScore  float32       `protobuf:"fixed32,4,opt,name=susceptibility_score,json=susceptibilityScore,proto3" json:"susceptibility_score,omitempty"`
	Label                culture.Label `protobuf:"varint,5,opt,name=label,proto3,enum=antibug.culture.Label" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PathogenSusceptibility) Reset()         { *m = PathogenSusceptibility{} }
func (m *PathogenSusceptibility) String() string { return proto.CompactTextString(m) }
func (*PathogenSusceptibility) ProtoMessage()    {}
func (*PathogenSusceptibility) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{0}
}

func (m *PathogenSusceptibility) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathogenSusceptibility.Unmarshal(m, b)
}
func (m *PathogenSusceptibility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathogenSusceptibility.Marshal(b, m, deterministic)
}
func (m *PathogenSusceptibility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathogenSusceptibility.Merge(m, src)
}
func (m *PathogenSusceptibility) XXX_Size() int {
	return xxx_messageInfo_PathogenSusceptibility.Size(m)
}
func (m *PathogenSusceptibility) XXX_DiscardUnknown() {
	xxx_messageInfo_PathogenSusceptibility.DiscardUnknown(m)
}

var xxx_messageInfo_PathogenSusceptibility proto.InternalMessageInfo

func (m *PathogenSusceptibility) GetAntimicrobialName() string {
	if m != nil {
		return m.AntimicrobialName
	}
	return ""
}

func (m *PathogenSusceptibility) GetAntimicrobialId() string {
	if m != nil {
		return m.AntimicrobialId
	}
	return ""
}

func (m *PathogenSusceptibility) GetIsolates() int32 {
	if m != nil {
		return m.Isolates
	}
	return 0
}

func (m *PathogenSusceptibility) GetSusceptibilityScore() float32 {
	if m != nil {
		return m.SusceptibilityScore
	}
	return 0
}

func (m *PathogenSusceptibility) GetLabel() culture.Label {
	if m != nil {
		return m.Label
	}
	return culture.Label_SUSCEPTIBLE
}

// AntimicrobialSusceptibility is the susceptibility of an antimicrobial against a pathogen
type AntimicrobialSusceptibility struct {
	PathogenName         string        `protobuf:"bytes,1,opt,name=pathogen_name,json=pathogenName,proto3" json:"pathogen_name,omitempty"`
	PathogenId           string        `protobuf:"bytes,2,opt,name=pathogen_id,json=pathogenId,proto3" json:"pathogen_id,omitempty"`
	Isolates             int32         `protobuf:"varint,3,opt,name=isolates,proto3" json:"isolates,omitempty"`
	SusceptibilityScore  float32       `protobuf:"fixed32,4,opt,name=susceptibility_score,json=susceptibilityScore,proto3" json:"susceptibility_score,omitempty"`
	Label                culture.Label `protobuf:"varint,5,opt,name=label,proto3,enum=antibug.culture.Label" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AntimicrobialSusceptibility) Reset()         { *m = AntimicrobialSusceptibility{} }
func (m *AntimicrobialSusceptibility) String() string { return proto.CompactTextString(m) }
func (*AntimicrobialSusceptibility) ProtoMessage()    {}
func (*AntimicrobialSusceptibility) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{1}
}

func (m *AntimicrobialSusceptibility) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AntimicrobialSusceptibility.Unmarshal(m, b)
}
func (m *AntimicrobialSusceptibility) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AntimicrobialSusceptibility.Marshal(b, m, deterministic)
}
func (m *AntimicrobialSusceptibility) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AntimicrobialSusceptibility.Merge(m, src)
}
func (m *AntimicrobialSusceptibility) XXX_Size() int {
	return xxx_messageInfo_AntimicrobialSusceptibility.Size(m)
}
func (m *AntimicrobialSusceptibility) XXX_DiscardUnknown() {
	xxx_messageInfo_AntimicrobialSusceptibility.DiscardUnknown(m)
}

var xxx_messageInfo_AntimicrobialSusceptibility proto.InternalMessageInfo

func (m *AntimicrobialSusceptibility) GetPathogenName() string {
	if m != nil {
		return m.PathogenName
	}
	return ""
}

func (m *AntimicrobialSusceptibility) GetPathogenId() string {
	if m != nil {
		return m.PathogenId
	}
	return ""
}

func (m *AntimicrobialSusceptibility) GetIsolates() int32 {
	if m != nil {
		return m.Isolates
	}
	return 0
}

func (m *AntimicrobialSusceptibility) GetSusceptibilityScore() float32 {
	if m != nil {
		return m.SusceptibilityScore
	}
	return 0
}

func (m *AntimicrobialSusceptibility) GetLabel() culture.Label {
	if m != nil {
		return m.Label
	}
	return culture.Label_SUSCEPTIBLE
}

// PathogenAntibiogram represents the antibiogram report for a particular pathogen
type PathogenAntibiogram struct {
	PathogenName         string                    `protobuf:"bytes,1,opt,name=pathogen_name,json=pathogenName,proto3" json:"pathogen_name,omitempty"`
	PathogenId           string                    `protobuf:"bytes,2,opt,name=pathogen_id,json=pathogenId,proto3" json:"pathogen_id,omitempty"`
	Susceptibilities     []*PathogenSusceptibility `protobuf:"bytes,4,rep,name=susceptibilities,proto3" json:"susceptibilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *PathogenAntibiogram) Reset()         { *m = PathogenAntibiogram{} }
func (m *PathogenAntibiogram) String() string { return proto.CompactTextString(m) }
func (*PathogenAntibiogram) ProtoMessage()    {}
func (*PathogenAntibiogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{2}
}

func (m *PathogenAntibiogram) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathogenAntibiogram.Unmarshal(m, b)
}
func (m *PathogenAntibiogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathogenAntibiogram.Marshal(b, m, deterministic)
}
func (m *PathogenAntibiogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathogenAntibiogram.Merge(m, src)
}
func (m *PathogenAntibiogram) XXX_Size() int {
	return xxx_messageInfo_PathogenAntibiogram.Size(m)
}
func (m *PathogenAntibiogram) XXX_DiscardUnknown() {
	xxx_messageInfo_PathogenAntibiogram.DiscardUnknown(m)
}

var xxx_messageInfo_PathogenAntibiogram proto.InternalMessageInfo

func (m *PathogenAntibiogram) GetPathogenName() string {
	if m != nil {
		return m.PathogenName
	}
	return ""
}

func (m *PathogenAntibiogram) GetPathogenId() string {
	if m != nil {
		return m.PathogenId
	}
	return ""
}

func (m *PathogenAntibiogram) GetSusceptibilities() []*PathogenSusceptibility {
	if m != nil {
		return m.Susceptibilities
	}
	return nil
}

// Antibiogram report for multiple pathogens
type PathogensAntibiogram struct {
	Antibiograms         []*PathogenAntibiogram `protobuf:"bytes,1,rep,name=antibiograms,proto3" json:"antibiograms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PathogensAntibiogram) Reset()         { *m = PathogensAntibiogram{} }
func (m *PathogensAntibiogram) String() string { return proto.CompactTextString(m) }
func (*PathogensAntibiogram) ProtoMessage()    {}
func (*PathogensAntibiogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{3}
}

func (m *PathogensAntibiogram) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathogensAntibiogram.Unmarshal(m, b)
}
func (m *PathogensAntibiogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathogensAntibiogram.Marshal(b, m, deterministic)
}
func (m *PathogensAntibiogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathogensAntibiogram.Merge(m, src)
}
func (m *PathogensAntibiogram) XXX_Size() int {
	return xxx_messageInfo_PathogensAntibiogram.Size(m)
}
func (m *PathogensAntibiogram) XXX_DiscardUnknown() {
	xxx_messageInfo_PathogensAntibiogram.DiscardUnknown(m)
}

var xxx_messageInfo_PathogensAntibiogram proto.InternalMessageInfo

func (m *PathogensAntibiogram) GetAntibiograms() []*PathogenAntibiogram {
	if m != nil {
		return m.Antibiograms
	}
	return nil
}

// AntimicrobialAntibiogram represents the antibiogram report for a particular antimicrobial
type AntimicrobialAntibiogram struct {
	AntimicrobialName    string                         `protobuf:"bytes,1,opt,name=antimicrobial_name,json=antimicrobialName,proto3" json:"antimicrobial_name,omitempty"`
	AntimicrobialId      string                         `protobuf:"bytes,2,opt,name=antimicrobial_id,json=antimicrobialId,proto3" json:"antimicrobial_id,omitempty"`
	Susceptibilities     []*AntimicrobialSusceptibility `protobuf:"bytes,4,rep,name=susceptibilities,proto3" json:"susceptibilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *AntimicrobialAntibiogram) Reset()         { *m = AntimicrobialAntibiogram{} }
func (m *AntimicrobialAntibiogram) String() string { return proto.CompactTextString(m) }
func (*AntimicrobialAntibiogram) ProtoMessage()    {}
func (*AntimicrobialAntibiogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{4}
}

func (m *AntimicrobialAntibiogram) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AntimicrobialAntibiogram.Unmarshal(m, b)
}
func (m *AntimicrobialAntibiogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AntimicrobialAntibiogram.Marshal(b, m, deterministic)
}
func (m *AntimicrobialAntibiogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AntimicrobialAntibiogram.Merge(m, src)
}
func (m *AntimicrobialAntibiogram) XXX_Size() int {
	return xxx_messageInfo_AntimicrobialAntibiogram.Size(m)
}
func (m *AntimicrobialAntibiogram) XXX_DiscardUnknown() {
	xxx_messageInfo_AntimicrobialAntibiogram.DiscardUnknown(m)
}

var xxx_messageInfo_AntimicrobialAntibiogram proto.InternalMessageInfo

func (m *AntimicrobialAntibiogram) GetAntimicrobialName() string {
	if m != nil {
		return m.AntimicrobialName
	}
	return ""
}

func (m *AntimicrobialAntibiogram) GetAntimicrobialId() string {
	if m != nil {
		return m.AntimicrobialId
	}
	return ""
}

func (m *AntimicrobialAntibiogram) GetSusceptibilities() []*AntimicrobialSusceptibility {
	if m != nil {
		return m.Susceptibilities
	}
	return nil
}

// Antibiogram report for multiple antimicrobials
type AntimicrobialsAntibiogram struct {
	Antibiograms         []*AntimicrobialAntibiogram `protobuf:"bytes,2,rep,name=antibiograms,proto3" json:"antibiograms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AntimicrobialsAntibiogram) Reset()         { *m = AntimicrobialsAntibiogram{} }
func (m *AntimicrobialsAntibiogram) String() string { return proto.CompactTextString(m) }
func (*AntimicrobialsAntibiogram) ProtoMessage()    {}
func (*AntimicrobialsAntibiogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{5}
}

func (m *AntimicrobialsAntibiogram) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AntimicrobialsAntibiogram.Unmarshal(m, b)
}
func (m *AntimicrobialsAntibiogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AntimicrobialsAntibiogram.Marshal(b, m, deterministic)
}
func (m *AntimicrobialsAntibiogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AntimicrobialsAntibiogram.Merge(m, src)
}
func (m *AntimicrobialsAntibiogram) XXX_Size() int {
	return xxx_messageInfo_AntimicrobialsAntibiogram.Size(m)
}
func (m *AntimicrobialsAntibiogram) XXX_DiscardUnknown() {
	xxx_messageInfo_AntimicrobialsAntibiogram.DiscardUnknown(m)
}

var xxx_messageInfo_AntimicrobialsAntibiogram proto.InternalMessageInfo

func (m *AntimicrobialsAntibiogram) GetAntibiograms() []*AntimicrobialAntibiogram {
	if m != nil {
		return m.Antibiograms
	}
	return nil
}

// key value of the filter criteria
type Value struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{6}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Value) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AdvancedFilter struct {
	Gender               Gender   `protobuf:"varint,1,opt,name=gender,proto3,enum=antibug.antibiogram.Gender" json:"gender,omitempty"`
	AgeMinDays           int64    `protobuf:"varint,2,opt,name=age_min_days,json=ageMinDays,proto3" json:"age_min_days,omitempty"`
	AgeMaxDays           int64    `protobuf:"varint,3,opt,name=age_max_days,json=ageMaxDays,proto3" json:"age_max_days,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdvancedFilter) Reset()         { *m = AdvancedFilter{} }
func (m *AdvancedFilter) String() string { return proto.CompactTextString(m) }
func (*AdvancedFilter) ProtoMessage()    {}
func (*AdvancedFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{7}
}

func (m *AdvancedFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdvancedFilter.Unmarshal(m, b)
}
func (m *AdvancedFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdvancedFilter.Marshal(b, m, deterministic)
}
func (m *AdvancedFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvancedFilter.Merge(m, src)
}
func (m *AdvancedFilter) XXX_Size() int {
	return xxx_messageInfo_AdvancedFilter.Size(m)
}
func (m *AdvancedFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvancedFilter.DiscardUnknown(m)
}

var xxx_messageInfo_AdvancedFilter proto.InternalMessageInfo

func (m *AdvancedFilter) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_ALL
}

func (m *AdvancedFilter) GetAgeMinDays() int64 {
	if m != nil {
		return m.AgeMinDays
	}
	return 0
}

func (m *AdvancedFilter) GetAgeMaxDays() int64 {
	if m != nil {
		return m.AgeMaxDays
	}
	return 0
}

// Filter represents the filter criteria used in filtering the antibiogram report
type Filter struct {
	PastDuration         Duration        `protobuf:"varint,1,opt,name=past_duration,json=pastDuration,proto3,enum=antibug.antibiogram.Duration" json:"past_duration,omitempty"`
	RegionScope          RegionScope     `protobuf:"varint,2,opt,name=region_scope,json=regionScope,proto3,enum=antibug.antibiogram.RegionScope" json:"region_scope,omitempty"`
	InputValues          []*Value        `protobuf:"bytes,3,rep,name=input_values,json=inputValues,proto3" json:"input_values,omitempty"`
	ScopeValues          []string        `protobuf:"bytes,4,rep,name=scope_values,json=scopeValues,proto3" json:"scope_values,omitempty"`
	Advanced             bool            `protobuf:"varint,5,opt,name=advanced,proto3" json:"advanced,omitempty"`
	Advance              *AdvancedFilter `protobuf:"bytes,6,opt,name=advance,proto3" json:"advance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_51c4d2d40a40cad1, []int{8}
}

func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetPastDuration() Duration {
	if m != nil {
		return m.PastDuration
	}
	return Duration_PAST_SIX_MONTHS
}

func (m *Filter) GetRegionScope() RegionScope {
	if m != nil {
		return m.RegionScope
	}
	return RegionScope_COUNTRY
}

func (m *Filter) GetInputValues() []*Value {
	if m != nil {
		return m.InputValues
	}
	return nil
}

func (m *Filter) GetScopeValues() []string {
	if m != nil {
		return m.ScopeValues
	}
	return nil
}

func (m *Filter) GetAdvanced() bool {
	if m != nil {
		return m.Advanced
	}
	return false
}

func (m *Filter) GetAdvance() *AdvancedFilter {
	if m != nil {
		return m.Advance
	}
	return nil
}

func init() {
	proto.RegisterEnum("antibug.antibiogram.Duration", Duration_name, Duration_value)
	proto.RegisterEnum("antibug.antibiogram.RegionScope", RegionScope_name, RegionScope_value)
	proto.RegisterEnum("antibug.antibiogram.Gender", Gender_name, Gender_value)
	proto.RegisterType((*PathogenSusceptibility)(nil), "antibug.antibiogram.PathogenSusceptibility")
	proto.RegisterType((*AntimicrobialSusceptibility)(nil), "antibug.antibiogram.AntimicrobialSusceptibility")
	proto.RegisterType((*PathogenAntibiogram)(nil), "antibug.antibiogram.PathogenAntibiogram")
	proto.RegisterType((*PathogensAntibiogram)(nil), "antibug.antibiogram.PathogensAntibiogram")
	proto.RegisterType((*AntimicrobialAntibiogram)(nil), "antibug.antibiogram.AntimicrobialAntibiogram")
	proto.RegisterType((*AntimicrobialsAntibiogram)(nil), "antibug.antibiogram.AntimicrobialsAntibiogram")
	proto.RegisterType((*Value)(nil), "antibug.antibiogram.Value")
	proto.RegisterType((*AdvancedFilter)(nil), "antibug.antibiogram.AdvancedFilter")
	proto.RegisterType((*Filter)(nil), "antibug.antibiogram.Filter")
}

func init() { proto.RegisterFile("antibiogram.proto", fileDescriptor_51c4d2d40a40cad1) }

var fileDescriptor_51c4d2d40a40cad1 = []byte{
	// 1142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6e, 0xdb, 0xc6,
	0x13, 0x0e, 0x29, 0x59, 0x51, 0x46, 0x8a, 0xa2, 0xac, 0x1d, 0xff, 0x14, 0x25, 0x3f, 0x94, 0x91,
	0x1b, 0x44, 0x96, 0x23, 0xd1, 0x91, 0x7d, 0x69, 0x8a, 0x00, 0x95, 0x6d, 0xd9, 0x16, 0x20, 0xcb,
	0x0e, 0x25, 0x37, 0x75, 0x51, 0x40, 0x58, 0x91, 0x0b, 0x6a, 0x03, 0x8a, 0x14, 0xb8, 0x2b, 0xc7,
	0xbe, 0xf6, 0x56, 0x14, 0xe8, 0xa1, 0xbd, 0x05, 0xe8, 0xb1, 0x6f, 0xd0, 0x4b, 0x5f, 0xa2, 0x28,
	0xd2, 0x17, 0xe8, 0xa1, 0xc7, 0x02, 0x7d, 0x85, 0x82, 0x2b, 0x52, 0x26, 0x1d, 0xfa, 0x4f, 0x81,
	0x16, 0x3d, 0x71, 0x77, 0xf6, 0x9b, 0x99, 0x6f, 0xbe, 0x9d, 0x1d, 0x10, 0xee, 0x62, 0x9b, 0xd3,
	0x01, 0x75, 0x4c, 0x17, 0x8f, 0x6a, 0x63, 0xd7, 0xe1, 0x0e, 0x9a, 0x17, 0xa6, 0x89, 0x59, 0x0b,
	0x1d, 0x15, 0x1f, 0x9a, 0x8e, 0x63, 0x5a, 0x44, 0xc5, 0x63, 0xaa, 0x62, 0xdb, 0x76, 0x38, 0xe6,
	0xd4, 0xb1, 0xd9, 0xd4, 0xa5, 0xf8, 0x54, 0x7c, 0xf4, 0xaa, 0x49, 0xec, 0x2a, 0x7b, 0x83, 0x4d,
	0x93, 0xb8, 0xaa, 0x33, 0x16, 0x88, 0x18, 0xf4, 0x6d, 0x7d, 0x62, 0xf1, 0x89, 0x4b, 0xa6, 0xdb,
	0xd2, 0x9f, 0x12, 0x2c, 0x1e, 0x60, 0x3e, 0x74, 0x4c, 0x62, 0x77, 0x27, 0x4c, 0x27, 0x63, 0x2f,
	0xad, 0x45, 0xf9, 0x29, 0xaa, 0x02, 0xf2, 0x48, 0x8c, 0xa8, 0xee, 0x3a, 0x03, 0x8a, 0xad, 0xbe,
	0x8d, 0x47, 0xa4, 0x20, 0x29, 0x52, 0xf9, 0x96, 0x76, 0x37, 0x72, 0xd2, 0xc1, 0x23, 0x82, 0x96,
	0x21, 0x1f, 0x85, 0x53, 0xa3, 0x20, 0x0b, 0xf0, 0x9d, 0x88, 0xbd, 0x65, 0xa0, 0x22, 0xa4, 0x29,
	0x73, 0x2c, 0xcc, 0x09, 0x2b, 0x24, 0x14, 0xa9, 0x3c, 0xa7, 0xcd, 0xf6, 0xe8, 0x19, 0x2c, 0xb0,
	0x08, 0x8f, 0x3e, 0xd3, 0x1d, 0x97, 0x14, 0x92, 0x8a, 0x54, 0x96, 0xb5, 0xf9, 0xe8, 0x59, 0xd7,
	0x3b, 0x42, 0x4f, 0x61, 0xce, 0xc2, 0x03, 0x62, 0x15, 0xe6, 0x14, 0xa9, 0x9c, 0xab, 0x2f, 0xd6,
	0x02, 0x0d, 0x83, 0x52, 0xdb, 0xde, 0xa9, 0x36, 0x05, 0x95, 0x7e, 0x93, 0xe0, 0x41, 0x23, 0x4c,
	0xe8, 0x5c, 0xd9, 0x4b, 0x70, 0x7b, 0xec, 0x0b, 0x12, 0xae, 0x38, 0x1b, 0x18, 0x45, 0xb1, 0x1f,
	0x40, 0x66, 0x06, 0x9a, 0xd5, 0x09, 0x81, 0xe9, 0xbf, 0x2e, 0xf1, 0x47, 0x09, 0xe6, 0x83, 0x4b,
	0x6d, 0x9c, 0xf5, 0xd1, 0x3f, 0x54, 0xda, 0x2b, 0xc8, 0x47, 0x28, 0x52, 0xc2, 0x0a, 0x49, 0x25,
	0x51, 0xce, 0xd4, 0x57, 0x6a, 0x31, 0xdd, 0x5b, 0x8b, 0x6f, 0x2f, 0xed, 0xbd, 0x20, 0x25, 0x03,
	0x16, 0x02, 0x2c, 0x0b, 0xd3, 0x6e, 0x43, 0x36, 0x14, 0x8f, 0x15, 0x24, 0x91, 0xac, 0x7c, 0x69,
	0xb2, 0x90, 0xbf, 0x16, 0xf1, 0x2e, 0xbd, 0x93, 0xa0, 0x10, 0xb9, 0xff, 0x70, 0xaa, 0x7f, 0xaf,
	0xe7, 0xbf, 0xb8, 0x50, 0xb5, 0xd5, 0xd8, 0x42, 0x2e, 0x69, 0xd1, 0x18, 0xe9, 0x6c, 0xb8, 0x1f,
	0x71, 0x88, 0xe8, 0xf7, 0xf2, 0x9c, 0x7e, 0xb2, 0x48, 0x5b, 0xbd, 0x3a, 0xed, 0xc5, 0x22, 0xae,
	0xc0, 0xdc, 0xa7, 0xd8, 0x9a, 0x10, 0x84, 0x20, 0x19, 0x92, 0x48, 0xac, 0x51, 0x0e, 0xe4, 0x99,
	0x0e, 0x32, 0x35, 0x4a, 0x5f, 0x49, 0x90, 0x6b, 0x18, 0xc7, 0xd8, 0xd6, 0x89, 0xb1, 0x4d, 0x2d,
	0x4e, 0x5c, 0xb4, 0x06, 0x29, 0x93, 0xd8, 0x06, 0x71, 0x85, 0x63, 0xae, 0xfe, 0x20, 0x96, 0xcc,
	0x8e, 0x80, 0x68, 0x3e, 0x14, 0x29, 0x90, 0xc5, 0x26, 0xe9, 0x8f, 0xa8, 0xdd, 0x37, 0xf0, 0x29,
	0x13, 0x19, 0x12, 0x1a, 0x60, 0x93, 0xec, 0x51, 0x7b, 0x0b, 0x9f, 0xb2, 0x19, 0x02, 0x9f, 0x4c,
	0x11, 0x89, 0x33, 0x04, 0x3e, 0xf1, 0x10, 0xa5, 0x9f, 0x65, 0x48, 0xf9, 0x1c, 0x36, 0xbc, 0xd7,
	0xc0, 0x78, 0xdf, 0x98, 0xb8, 0x62, 0x42, 0xfa, 0x54, 0xfe, 0x1f, 0x4b, 0x65, 0xcb, 0x07, 0x79,
	0x8f, 0x85, 0xf1, 0x60, 0x87, 0x36, 0x21, 0xeb, 0x12, 0x93, 0x3a, 0xb6, 0xf7, 0x84, 0xc7, 0x44,
	0x50, 0xca, 0xd5, 0x95, 0xd8, 0x10, 0x9a, 0x00, 0x76, 0x3d, 0x9c, 0x96, 0x71, 0xcf, 0x36, 0xe8,
	0x05, 0x64, 0xa9, 0x3d, 0x9e, 0xf0, 0xfe, 0xb1, 0x27, 0xa9, 0xc7, 0xda, 0xbb, 0x9f, 0x62, 0x6c,
	0x10, 0xa1, 0xba, 0x96, 0x11, 0x78, 0xb1, 0x66, 0xe8, 0x11, 0x64, 0x45, 0xf2, 0xc0, 0xdd, 0xeb,
	0xaa, 0x5b, 0x5a, 0x46, 0xd8, 0x7c, 0x48, 0x11, 0xd2, 0xd8, 0xbf, 0x00, 0x31, 0x41, 0xd2, 0xda,
	0x6c, 0x8f, 0x5e, 0xc0, 0x4d, 0x7f, 0x5d, 0x48, 0x29, 0x52, 0x39, 0x53, 0x5f, 0x8a, 0x6f, 0x8c,
	0xc8, 0x05, 0x6a, 0x81, 0x4f, 0xe5, 0x07, 0x09, 0xd2, 0x33, 0x39, 0xe6, 0xe1, 0xce, 0x41, 0xa3,
	0xdb, 0xeb, 0x77, 0x5b, 0x9f, 0xf5, 0xf7, 0xf6, 0x3b, 0xbd, 0xdd, 0x6e, 0xfe, 0x06, 0x42, 0x90,
	0x13, 0xc6, 0xfd, 0x4e, 0xb3, 0x7f, 0xd4, 0x6c, 0x68, 0xdd, 0xbc, 0x34, 0xb3, 0xf5, 0x5e, 0xed,
	0xfb, 0x36, 0x79, 0xe6, 0xbc, 0xbd, 0x7f, 0xa8, 0xf9, 0xc6, 0x04, 0x5a, 0x80, 0xbc, 0x30, 0x36,
	0x5b, 0x3b, 0xbb, 0x3d, 0xdf, 0x9a, 0x44, 0x8b, 0x80, 0x82, 0x3c, 0xbd, 0x66, 0xb3, 0xe3, 0xdb,
	0xe7, 0xd0, 0x7d, 0xb8, 0x37, 0x0d, 0xbb, 0xdb, 0xd2, 0x7a, 0x47, 0xa1, 0xe8, 0xa9, 0xca, 0x16,
	0x64, 0x42, 0x17, 0x80, 0x32, 0x70, 0x73, 0x73, 0xff, 0xb0, 0xd3, 0xd3, 0x8e, 0xf2, 0x37, 0x10,
	0x40, 0x4a, 0x6c, 0x8e, 0xf2, 0x12, 0xca, 0x01, 0x74, 0x0f, 0x37, 0xfa, 0xfe, 0x5e, 0x46, 0x59,
	0x48, 0x6f, 0x37, 0x36, 0x5b, 0xed, 0x56, 0xef, 0x28, 0x9f, 0xa8, 0x3c, 0x81, 0xd4, 0xb4, 0x29,
	0xd1, 0x4d, 0x48, 0x34, 0xda, 0xed, 0xfc, 0x0d, 0x94, 0x86, 0xe4, 0x5e, 0xa3, 0xdd, 0xcc, 0x4b,
	0x5e, 0x98, 0xed, 0xa6, 0x58, 0x27, 0xea, 0x7f, 0x24, 0x21, 0x17, 0x7a, 0x3e, 0x8d, 0x83, 0x16,
	0xfa, 0x46, 0x82, 0xff, 0xed, 0x10, 0x3b, 0x76, 0xc4, 0xc5, 0xf7, 0xff, 0x54, 0xeb, 0xe2, 0xf2,
	0xa5, 0x93, 0x2e, 0x1c, 0xa7, 0xb4, 0xf2, 0xe5, 0xaf, 0xbf, 0x7f, 0x27, 0x3f, 0x46, 0x4b, 0xfe,
	0xbf, 0x82, 0x70, 0x53, 0xc3, 0x4f, 0x57, 0x0d, 0x26, 0x39, 0x43, 0x5f, 0x4b, 0xb0, 0x18, 0x22,
	0x74, 0x6d, 0x3e, 0xd7, 0x9e, 0xbc, 0xa5, 0x8a, 0xa0, 0xf3, 0x21, 0x2a, 0x5d, 0x4d, 0x07, 0x7d,
	0x2f, 0xc1, 0xc3, 0x9d, 0xa9, 0x7b, 0xfc, 0x18, 0xbb, 0x94, 0x53, 0xed, 0xea, 0x69, 0x16, 0x11,
	0x6a, 0x55, 0x30, 0xab, 0xa0, 0xf2, 0xc5, 0xcc, 0x22, 0x13, 0x9c, 0xa1, 0xb7, 0x12, 0x3c, 0x38,
	0xcf, 0xef, 0xda, 0xf4, 0xfe, 0xde, 0xb0, 0x2d, 0xa9, 0x82, 0xdd, 0x32, 0x7a, 0x72, 0x4d, 0x76,
	0x1b, 0xef, 0xe4, 0x6f, 0x1b, 0x3f, 0xc9, 0xe8, 0x17, 0x09, 0xe6, 0x43, 0x71, 0x94, 0x2e, 0x71,
	0x8f, 0xa9, 0x4e, 0x4a, 0x18, 0x1e, 0x87, 0x9c, 0x15, 0x36, 0x35, 0x2b, 0x55, 0xc5, 0x0f, 0xad,
	0x8c, 0x5d, 0xe7, 0x35, 0xd1, 0x39, 0x7a, 0x34, 0xe4, 0x7c, 0xcc, 0x9e, 0xab, 0xaa, 0x49, 0xf9,
	0x70, 0x32, 0xa8, 0xe9, 0xce, 0x48, 0x35, 0xa9, 0x71, 0xea, 0xd8, 0x01, 0x8b, 0xe2, 0x3d, 0x93,
	0x1a, 0xc4, 0xb1, 0x87, 0x58, 0x27, 0xee, 0x27, 0xe6, 0x08, 0x53, 0xcb, 0x43, 0x55, 0x5e, 0xc2,
	0xc2, 0x46, 0x77, 0x4b, 0x59, 0xab, 0x6e, 0x5a, 0x78, 0xc2, 0x88, 0xd2, 0xa6, 0x3a, 0xb1, 0x19,
	0x41, 0x1f, 0x5d, 0x19, 0x51, 0x1d, 0x58, 0xce, 0x40, 0x1d, 0x61, 0xc6, 0x89, 0xab, 0xb6, 0x5b,
	0x9b, 0xcd, 0x4e, 0xb7, 0x59, 0xe3, 0x27, 0xbc, 0x9e, 0x78, 0x56, 0x5b, 0xad, 0x24, 0x24, 0x39,
	0x59, 0xcf, 0xe3, 0xf1, 0xd8, 0xa2, 0xba, 0x18, 0x32, 0xea, 0x6b, 0xe6, 0xd8, 0xcf, 0xdf, 0xb3,
	0x68, 0x1f, 0x43, 0x62, 0x7d, 0x75, 0x1d, 0xad, 0x43, 0x45, 0x23, 0x7c, 0xe2, 0xda, 0xc4, 0x50,
	0xde, 0x0c, 0x89, 0xad, 0xf0, 0x21, 0x51, 0x5c, 0xc2, 0x9c, 0x89, 0xab, 0x13, 0xc5, 0x70, 0x08,
	0x53, 0x6c, 0x87, 0x2b, 0xe4, 0x84, 0x32, 0x5e, 0x43, 0x29, 0x48, 0xbe, 0x95, 0xa5, 0xd4, 0xe7,
	0x71, 0xbf, 0xdd, 0x83, 0x94, 0xf8, 0x45, 0x5e, 0xfb, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x2e,
	0xc8, 0xd9, 0xa7, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AntibiogramAPIClient is the client API for AntibiogramAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AntibiogramAPIClient interface {
	// Generates antibiogram report for multiple pathogens
	GenPathogensAntibiogram(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PathogensAntibiogram, error)
	// Generates antibiogram report for a single pathogen
	GenPathogenAntibiogram(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PathogenAntibiogram, error)
	// Generates antibiogram report for multiple antimicrobials
	GenAntimicrobialsAntibiogram(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*AntimicrobialsAntibiogram, error)
	// Generates antibiogram report for a single antimicrobial
	GenAntimicrobialAntibiogram(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*AntimicrobialAntibiogram, error)
}

type antibiogramAPIClient struct {
	cc *grpc.ClientConn
}

func NewAntibiogramAPIClient(cc *grpc.ClientConn) AntibiogramAPIClient {
	return &antibiogramAPIClient{cc}
}

func (c *antibiogramAPIClient) GenPathogensAntibiogram(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PathogensAntibiogram, error) {
	out := new(PathogensAntibiogram)
	err := c.cc.Invoke(ctx, "/antibug.antibiogram.AntibiogramAPI/GenPathogensAntibiogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antibiogramAPIClient) GenPathogenAntibiogram(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*PathogenAntibiogram, error) {
	out := new(PathogenAntibiogram)
	err := c.cc.Invoke(ctx, "/antibug.antibiogram.AntibiogramAPI/GenPathogenAntibiogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antibiogramAPIClient) GenAntimicrobialsAntibiogram(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*AntimicrobialsAntibiogram, error) {
	out := new(AntimicrobialsAntibiogram)
	err := c.cc.Invoke(ctx, "/antibug.antibiogram.AntibiogramAPI/GenAntimicrobialsAntibiogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antibiogramAPIClient) GenAntimicrobialAntibiogram(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*AntimicrobialAntibiogram, error) {
	out := new(AntimicrobialAntibiogram)
	err := c.cc.Invoke(ctx, "/antibug.antibiogram.AntibiogramAPI/GenAntimicrobialAntibiogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntibiogramAPIServer is the server API for AntibiogramAPI service.
type AntibiogramAPIServer interface {
	// Generates antibiogram report for multiple pathogens
	GenPathogensAntibiogram(context.Context, *Filter) (*PathogensAntibiogram, error)
	// Generates antibiogram report for a single pathogen
	GenPathogenAntibiogram(context.Context, *Filter) (*PathogenAntibiogram, error)
	// Generates antibiogram report for multiple antimicrobials
	GenAntimicrobialsAntibiogram(context.Context, *Filter) (*AntimicrobialsAntibiogram, error)
	// Generates antibiogram report for a single antimicrobial
	GenAntimicrobialAntibiogram(context.Context, *Filter) (*AntimicrobialAntibiogram, error)
}

func RegisterAntibiogramAPIServer(s *grpc.Server, srv AntibiogramAPIServer) {
	s.RegisterService(&_AntibiogramAPI_serviceDesc, srv)
}

func _AntibiogramAPI_GenPathogensAntibiogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntibiogramAPIServer).GenPathogensAntibiogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibug.antibiogram.AntibiogramAPI/GenPathogensAntibiogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntibiogramAPIServer).GenPathogensAntibiogram(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntibiogramAPI_GenPathogenAntibiogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntibiogramAPIServer).GenPathogenAntibiogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibug.antibiogram.AntibiogramAPI/GenPathogenAntibiogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntibiogramAPIServer).GenPathogenAntibiogram(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntibiogramAPI_GenAntimicrobialsAntibiogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntibiogramAPIServer).GenAntimicrobialsAntibiogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibug.antibiogram.AntibiogramAPI/GenAntimicrobialsAntibiogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntibiogramAPIServer).GenAntimicrobialsAntibiogram(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntibiogramAPI_GenAntimicrobialAntibiogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntibiogramAPIServer).GenAntimicrobialAntibiogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibug.antibiogram.AntibiogramAPI/GenAntimicrobialAntibiogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntibiogramAPIServer).GenAntimicrobialAntibiogram(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

var _AntibiogramAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "antibug.antibiogram.AntibiogramAPI",
	HandlerType: (*AntibiogramAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenPathogensAntibiogram",
			Handler:    _AntibiogramAPI_GenPathogensAntibiogram_Handler,
		},
		{
			MethodName: "GenPathogenAntibiogram",
			Handler:    _AntibiogramAPI_GenPathogenAntibiogram_Handler,
		},
		{
			MethodName: "GenAntimicrobialsAntibiogram",
			Handler:    _AntibiogramAPI_GenAntimicrobialsAntibiogram_Handler,
		},
		{
			MethodName: "GenAntimicrobialAntibiogram",
			Handler:    _AntibiogramAPI_GenAntimicrobialAntibiogram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "antibiogram.proto",
}
